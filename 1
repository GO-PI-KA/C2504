To refactor your code to use a converter class for searching the buttons, you will need to:

Create a ButtonSearchConverter class: This class will implement IValueConverter and will handle the logic for showing or hiding the buttons based on the text entered in the search box.

Modify the XAML to bind the visibility of the buttons: You will bind the visibility of each button to the search text, and the ButtonSearchConverter will handle whether the button should be visible based on the search text.

using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace Task
{
    public class ButtonSearchConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string searchText = value as string;
            string buttonContent = parameter as string;

            // If the search box is empty, show all buttons
            if (string.IsNullOrWhiteSpace(searchText) || string.IsNullOrEmpty(buttonContent))
            {
                return Visibility.Visible;
            }

            // Only show the button if the content starts with the search text (case-insensitive)
            return buttonContent.ToLower().StartsWith(searchText.ToLower()) ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // No need for ConvertBack in this scenario
            return null;
        }
    }
}

Step 2: Modify MainWindow.xaml
Now that we have the converter, we need to:

Define the converter in the Window.Resources.
Bind the Visibility of each button to the Text property of the TextBox, using the converter to check if the button content matches the search text.
Here's the updated XAML:

<Window x:Class="Task.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Task"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <Window.Resources>
        <!-- Define the ButtonSearchConverter -->
        <local:ButtonSearchConverter x:Key="ButtonSearchConverter" />
    </Window.Resources>

    <Window.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="1"/>
            <GradientStop Color="#FF003D51" Offset="0.311"/>
        </LinearGradientBrush>
    </Window.Background>

    <Grid Margin="25,20,20,20">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        
        <!-- Search Box -->
        <Grid Grid.Row="0" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBox x:Name="txtSearchBox" 
                     Margin="0,5,5,5" 
                     TextAlignment="Center"  
                     FontWeight="Bold" 
                     FontSize="14" 
                     Background="#FF006887" 
                     HorizontalAlignment="Stretch"/>
            <Label x:Name="lblSearchBox" 
                   Content="Enter Text To Search" 
                   Background="Transparent" Opacity="0.5" 
                   IsHitTestVisible="False" Foreground="White" 
                   Margin="60,0,0,10" HorizontalAlignment="Center"/>
            <Image Source="searchicon.png" Width="15" Height="13" 
                   VerticalAlignment="Center" HorizontalAlignment="Left" 
                   Margin="20,0,0,0" RenderTransformOrigin="0.333,1.465"/>
            <Button Style="{StaticResource btnPrimary}" 
                    x:Name="btnSearch" 
                    Content="Search" 
                    Height="NaN"  
                    FontWeight="Bold" 
                    FontSize="16" 
                    Margin="10,5,0,5" 
                    Background="#FF006685" 
                    HorizontalAlignment="Left" Grid.Column="1"/>
        </Grid>

        <!-- WrapPanel for buttons -->
        <WrapPanel x:Name="btnDisease" Grid.Row="1" Margin="10" Background="#FF006B8B">
            <!-- Buttons with Binding to Visibility using the ButtonSearchConverter -->
            <Button Style="{StaticResource btnControl}" Content="Atherosclerosis"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Atherosclerosis"/>
            <Button Style="{StaticResource btnControl}" Content="Arteriovenous"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Arteriovenous"/>
            <Button Style="{StaticResource btnControl}" Content="Aneurysms"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Aneurysms"/>
            <Button Style="{StaticResource btnControl}" Content="Buerger"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Buerger"/>
            <Button Style="{StaticResource btnControl}" Content="Bleeding"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Bleeding"/>
            <Button Style="{StaticResource btnControl}" Content="Dissection"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Dissection"/>
            <Button Style="{StaticResource btnControl}" Content="Dysplastic"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Dysplastic"/>
            <Button Style="{StaticResource btnControl}" Content="Gout"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Gout"/>
            <Button Style="{StaticResource btnControl}" Content="Panniculitis"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Panniculitis"/>
            <Button Style="{StaticResource btnControl}" Content="Phlebitis"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Phlebitis"/>
            <Button Style="{StaticResource btnControl}" Content="Varicose"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Varicose"/>
            <Button Style="{StaticResource btnControl}" Content="Vasculitis"
                    Visibility="{Binding Text, ElementName=txtSearchBox, Converter={StaticResource ButtonSearchConverter}, ConverterParameter=Vasculitis"/>
        </WrapPanel>
    </Grid>
</Window>


Key Changes:
Converter in Resources:

I added the ButtonSearchConverter to the Window.Resources section.
Button Visibility Binding:

Each button has its Visibility property bound to the Text property of the txtSearchBox TextBox.
The ConverterParameter is set to the button content ("Atherosclerosis", "Arteriovenous", etc.). This is passed to the converter to check whether the button content starts with the search text.
Step 3: Modify the Code-Behind (MainWindow.xaml.cs)
In the code-behind, the TextChanged event is no longer needed to directly control button visibility, as this is now handled by the ButtonSearchConverter in the XAML. However, if you want to manage the visibility of the search label, you can do so as follows:

using System;
using System.Windows;
using System.Windows.Controls;

namespace Task
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void txtSearchBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            // Handle the search label visibility when text changes
            string searchText = txtSearchBox.Text;
            lblSearchBox.Visibility = string.IsNullOrWhiteSpace(searchText) ? Visibility.Visible : Visibility.Collapsed;
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}

Conclusion
Now, when the user types into the txtSearchBox, the visibility of the buttons will be controlled automatically by the ButtonSearchConverter class. The buttons will be shown or hidden based on whether their content matches the search text. This approach decouples the search logic from the code-behind and makes use of WPF's data binding and converters to provide a clean solution.
