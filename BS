MainWindow.xaml
---------------------------
<Window x:Class="Task.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Task"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Closed="Window_Closed" Style="{StaticResource winPrimary}">
    <!--scrollbar-->
    <ScrollViewer  VerticalScrollBarVisibility="Auto" >
        <DockPanel>
            <!--grid to make responsive-->
            <Grid Margin="25,20,20,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MaxWidth="1550"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="10" MaxWidth="1550">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <!--Search Textbox-->
                    <TextBox Style="{StaticResource txtPrimary}"
         x:Name="txtSearchBox" TextChanged="txtSearchBox_TextChanged" Text="{Binding SearchCommand}" Margin="0,5,0,0"/>
                    <!--Search TextBox Label-->
                    <Label Style="{StaticResource lblPrimary}"
         x:Name="lblSearchBox" HorizontalAlignment="Left" Margin="320,5,0,0" />
                    <!--Search TextBox Icon-->
                    <Image Style="{StaticResource imgPrimary}"
        RenderTransformOrigin="0.333,1.465" OpacityMask="#FFF4F4F4"/>

                    <!--Search Button-->
                </Grid>
                <!--Disease Buttons-->
                <Grid  Grid.Row="1" Width="Auto" MaxWidth="1550" >
                    <WrapPanel x:Name="btnDisease"  Style="{StaticResource wrpPrimary}" Margin="10,5,10,5" >
                        <Button Style="{StaticResource btnControl}" Content="Atherosclerosis" FontFamily="Verdana" />
                        <Button Style="{StaticResource btnControl}" Content="Arteriovenous" />
                        <Button Style="{StaticResource btnControl}" Content="Aneurysms" />
                        <Button Style="{StaticResource btnControl}" Content="Buerger" />
                        <Button Style="{StaticResource btnControl}" Content="Bleeding" />
                        <Button Style="{StaticResource btnControl}" Content="Dissection" />
                        <Button Style="{StaticResource btnControl}" Content="Dysplastic" />
                        <Button Style="{StaticResource btnControl}" Content="Gout" />
                        <Button Style="{StaticResource btnControl}" Content="Panniculitis" />
                        <Button Style="{StaticResource btnControl}" Content="Phlebitis" />
                        <Button Style="{StaticResource btnControl}" Content="Varicose" />
                        <Button Style="{StaticResource btnControl}" Content="Vasculitis" />
                    </WrapPanel>
                </Grid>
            </Grid>
        </DockPanel>
    </ScrollViewer>
</Window>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MainWindow.xaml.cs
--------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Task
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        private ButtonSearch _buttonSearch;
        public MainWindow()
        {
            InitializeComponent();
            _buttonSearch = new ButtonSearch(btnDisease, lblSearchBox);
        }

        private void txtSearchBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            string searchText = txtSearchBox.Text;
            _buttonSearch.Search(searchText);
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ButtonSearch.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows;
using System.Windows.Input;
using log4net;
using System.Diagnostics;

namespace Task
{
    public class ButtonSearch
    {

        private readonly WrapPanel _buttonContainer;
        private readonly Label _searchLabel;

        public ButtonSearch(WrapPanel buttonContainer, Label searchLabel)
        {
            _buttonContainer = buttonContainer;
            _searchLabel = searchLabel;
        }
        public void Search(string searchText)
        {
            // Display the label only when the SearchBox is empty
            _searchLabel.Visibility = string.IsNullOrWhiteSpace(searchText) ? Visibility.Visible : Visibility.Collapsed;

            try
            {
                // Check if the Search TextBox is empty
                if (string.IsNullOrWhiteSpace(searchText))
                {
                    foreach (Button button in _buttonContainer.Children.OfType<Button>())
                    {
                        // Display all buttons if Search TextBox is empty
                        button.Visibility = Visibility.Visible;
                      
                    }
                    Logger.log.Info("All buttons are visible");
                    

                }
                else
                {
                    foreach (Button button in _buttonContainer.Children.OfType<Button>())
                    {
                        // Display only those buttons that match the searchText
                        button.Visibility = button.Content.ToString().ToLower().StartsWith(searchText.ToLower()) ? Visibility.Visible : Visibility.Collapsed;
                        
                    }
                    Logger.log.Info("Only filtered buttons are displayed");
                }
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex);
                MessageBox.Show(ex.StackTrace); 
            }
        }
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
App.xaml
--------
<Application x:Class="Task.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Task"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!--Setting Gradient as Style to Buttons-->
            <LinearGradientBrush x:Key="buttonStyleGradient" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0" />
            <GradientStop Color="#FF2C88A3" Offset="1" />
        </LinearGradientBrush>
        <!--Setting Gradient as Style to Window-->
        <LinearGradientBrush x:Key="windowStyleGradient" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="1"/>
            <GradientStop Color="#FF003D51" Offset="0.311"/>
        </LinearGradientBrush>
        <!--Background Style-->
        <Style TargetType="Window" x:Key="winPrimary">
            <Setter Property="Background" Value="{StaticResource windowStyleGradient}"/>
        </Style>
        <!--Search TextBox Style-->
            <Style TargetType="TextBox" x:Key="txtPrimary">
            <Setter Property="Margin" Value="0,5,5,5"/>
            <Setter Property="BorderBrush" Value="Maroon"/>
            <Setter Property="Background" Value="#FF006887"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
        </Style>
        <!--Search TextBox Label Style-->
            <Style TargetType="Label" x:Key="lblPrimary">
            <Setter Property="Content" Value="Enter Text To Search"/>
            <Setter Property="Opacity" Value="0.5"/>
            <Setter Property="Margin" Value="60,5,0,10"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontFamily" Value="Verdana"/>
        </Style>
            <!--Search TextBox Icon Style-->
            <Style TargetType="Image" x:Key="imgPrimary">
            <Setter Property="Source" Value="searchicon.png"/>
            <Setter Property="Width" Value="15"/>
            <Setter Property="Height" Value="13"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="20,0,0,0"/>
        </Style>
            <!--Search Button Style-->
            <Style TargetType="Button" x:Key="btnPrimary">
            <Setter Property="Background" Value="#FF006887"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Content" Value="Search"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Height" Value="NaN"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="BorderBrush" Value="Maroon"/>
            <Setter Property="Margin" Value="10,5,0,5"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <!--Search Button Hovering Effect-->
                <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="AliceBlue"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
             <!--Wrap Panel Style-->
        <Style TargetType="WrapPanel" x:Key="wrpPrimary">
            <Setter Property="Background" Value="#FF006887"/>
            <Setter Property="Margin" Value="5"/>
        </Style>
             <!--Disease Buttons Style-->
        <Style TargetType="Button" x:Key="btnControl">
            <Setter Property="Background" Value="{StaticResource buttonStyleGradient}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="BorderBrush" Value="Maroon"/>
            <Setter Property="Margin" Value="15,25,15,25"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <!--Disease Buttons Round Corner Style-->
            <Style.Resources>
                <Style TargetType="Border">
                    <Setter Property="CornerRadius" Value="10" />
                </Style>
            </Style.Resources>
            <!--Disease Buttons Hovering Effect-->
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="AliceBlue"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
    </Application.Resources>
</Application>


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
App.config
---------------
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>

	<log4net>
		<appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="logfile.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="ALL" />
			<appender-ref ref="FileAppender" />
		</root>
	</log4net>
</configuration>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Logger.cs
----------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;

namespace Task
{
    public static class Logger
    {
        public static readonly ILog log=LogManager.GetLogger(typeof(Logger));
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AssemblyInfo.cs
----------------
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Task")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("QuEST-Global")]
[assembly: AssemblyProduct("Task")]
[assembly: AssemblyCopyright("Copyright © QuEST-Global 2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: log4net.Config.XmlConfigurator]
