Server
-------------
MainWindow.xaml
---------------
<Window x:Class="Task.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Task"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Closed="Window_Closed" Style="{StaticResource winPrimary}">
    <Window.Resources>
        <local:ButtonVisibilityConverter x:Key="ButtonVisibilityConverter"/>
    </Window.Resources>
    <!--scrollbar-->
    <ScrollViewer  VerticalScrollBarVisibility="Auto" >
        <DockPanel>
            <!--grid to make responsive-->
            <Grid Margin="25,20,20,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MaxWidth="1550"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="10" MaxWidth="1550">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <!--Search Textbox-->
                    <TextBox Style="{StaticResource txtPrimary}"
         x:Name="textSearchBox" Margin="0,5,0,0" TextChanged="textSearchBox_TextChanged"/>
                    <!--Search TextBox Label-->
                    <Label Style="{StaticResource lblPrimary}"
         x:Name="labelSearchBox" HorizontalAlignment="Left" Margin="320,5,0,0"  />
                    <!--Search TextBox Icon-->
                    <Image Style="{StaticResource imgPrimary}"
        RenderTransformOrigin="0.333,1.465" OpacityMask="#FFF4F4F4"/>

                    <!--Search Button-->
                </Grid>
                <!--Disease Buttons-->
                <Grid  Grid.Row="1" Width="Auto" MaxWidth="1550" >
                    <WrapPanel x:Name="btnDisease"  Style="{StaticResource wrpPrimary}" Margin="10,5,10,5" >
                        <Button Style="{StaticResource btnControl}" Content="Atherosclerosis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Atherosclerosis}" />
                        <Button Style="{StaticResource btnControl}" Content="Arteriovenous" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Arteriovenous}" />
                        <Button Style="{StaticResource btnControl}" Content="Aneurysms" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Aneurysms}"  />
                        <Button Style="{StaticResource btnControl}" Content="Buerger" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Buerger}" />
                        <Button Style="{StaticResource btnControl}" Content="Bleeding" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Bleeding}" />
                        <Button Style="{StaticResource btnControl}" Content="Dissection" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Dissection}" />
                        <Button Style="{StaticResource btnControl}" Content="Dysplastic" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Dysplastic}" />
                        <Button Style="{StaticResource btnControl}" Content="Gout" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Gout}" />
                        <Button Style="{StaticResource btnControl}" Content="Panniculitis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Panniculitis}" />
                        <Button Style="{StaticResource btnControl}" Content="Phlebitis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Phlebitis}" />
                        <Button Style="{StaticResource btnControl}" Content="Varicose" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Varicose}" />
                        <Button Style="{StaticResource btnControl}" Content="Vasculitis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Vasculitis}" />
                    </WrapPanel>
                </Grid>
            </Grid>
        </DockPanel>
    </ScrollViewer>
</Window>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MainWindow.xaml.cs
-------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Task
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// To terminate the application when the window is closed.
        /// </summary>
        private TcpServer tcpServer;
        public MainWindow()
        {
            InitializeComponent();
            tcpServer = new TcpServer();
            tcpServer.OnReceivedMessage += TcpServer_OnReceivedMessage;
            tcpServer.Start();
        }
        /// <summary>
        /// Event Handler that gets triggered when server receives a message from the client.
        /// </summary>
        /// <param name="message"></param>
        private void TcpServer_OnReceivedMessage (string message)
        {
            Dispatcher.Invoke (() =>
            {
                textSearchBox.Text = message;
            });    
        }
       
        public void Window_Closed(object sender, EventArgs e)
        {   
            tcpServer.Stop();
            Application.Current.Shutdown();
        }
        /// <summary>
        /// To check the visibility of the label in search textbox.
        /// </summary>
        private void textSearchBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (textSearchBox.Text != null)
                {
                    labelSearchBox.Visibility = string.IsNullOrWhiteSpace(textSearchBox.Text) ? Visibility.Visible : Visibility.Collapsed;
                }
                Logger.log.Info("No issues!");
            }
            catch (Exception)
            {
                Logger.log.Error("Error!");
            }
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ButtonVisibilityConverter.cs
------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows;
using System.Windows.Input;
using log4net;
using System.Diagnostics;
using System.Windows.Data;
using System.Globalization;

namespace Task
{ 
    /// <summary>
    /// A class to search buttons.
    /// </summary>
    public class ButtonVisibilityConverter : IValueConverter
    {
        /// <summary>
        /// Checks the visibility of buttons according to the text in search textbox.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="targetType"></param>
        /// <param name="parameter"></param>
        /// <param name="culture"></param>
        /// <returns>the buttons that matches the criteria.</returns>
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {

            if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
            {
                return Visibility.Visible;
            }

            string searchText = value.ToString().ToLower();
            string buttonContent = parameter.ToString().ToLower();
            return buttonContent.StartsWith(searchText) ? Visibility.Visible : Visibility.Collapsed;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
 }



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TcpServer.cs
---------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace Task
{
    /// <summary>
    /// this class act as Server
    /// </summary>
    public class TcpServer
    {
        private TcpListener tcpListener;
        private Thread listenerThread;
        private bool isRunning;
        public event Action<string> OnReceivedMessage;

        /// <summary>
        /// Tcp server listens for incoming client connection on port 5000.
        /// </summary>
        public void Start()
        {
            try
            {
                tcpListener = new TcpListener(IPAddress.Any, 5000);
                tcpListener.Start();
                isRunning = true;
                listenerThread = new Thread(ListenForClients);
                listenerThread.Start();
            }
            catch (Exception ex)
            {
                Logger.log.Error("Error in starting the TCP server", ex);
            }
        }
        /// <summary>
        /// Listens for incoming TCP client connection.
        /// </summary>
        private void ListenForClients()
        {
            while (isRunning)
            {
                try
                {
                    TcpClient tcpClient = tcpListener.AcceptTcpClient();
                    Thread clientThread = new Thread(HandleClientComm);
                    clientThread.Start(tcpClient);
                   
                }
                catch (Exception ex)
                {
                    Logger.log.Error("Error in connecting the client", ex);
                }
            }
        }
        /// <summary>
        /// Handle the communication between server and the connected client.
        /// </summary>
        /// <param name="obj"></param>
        private void HandleClientComm(object obj)
        {
            TcpClient tcpClient = obj as TcpClient;
            NetworkStream stream = tcpClient.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
            {
                string message=Encoding.UTF8.GetString(buffer,0,bytesRead);
                Logger.log.Info($"Received message:{message}");
                OnReceivedMessage?.Invoke(message);
            }
        }
        /// <summary>
        /// Stop the server.
        /// </summary>
        public void Stop()
        {
            isRunning = false;
            tcpListener.Stop();
            listenerThread?.Join();
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Logger.cs
-----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;

namespace Task
{  /// <summary>
   /// A class to log messages.
   /// </summary>
    public static class Logger
    {
        public static readonly ILog log = LogManager.GetLogger(typeof(Logger));
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
App.xaml
-------------
<Application x:Class="Task.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Task"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!--Setting Gradient as Style to Buttons-->
        <local:ButtonVisibilityConverter  x:Key="ButtonVisibilityConverter"/>
        <LinearGradientBrush x:Key="buttonStyleGradient" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0" />
            <GradientStop Color="#FF2C88A3" Offset="1" />
        </LinearGradientBrush>
        <!--Setting Gradient as Style to Window-->
        <LinearGradientBrush x:Key="windowStyleGradient" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="1"/>
            <GradientStop Color="#FF003D51" Offset="0.311"/>
        </LinearGradientBrush>
        <!--Background Style-->
        <Style TargetType="Window" x:Key="winPrimary">
            <Setter Property="Background" Value="{StaticResource windowStyleGradient}"/>
        </Style>
        <!--Search TextBox Style-->
            <Style TargetType="TextBox" x:Key="txtPrimary">
            <Setter Property="Margin" Value="0,5,5,5"/>
            <Setter Property="BorderBrush" Value="Maroon"/>
            <Setter Property="Background" Value="#FF006887"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
        </Style>
        <!--Search TextBox Label Style-->
            <Style TargetType="Label" x:Key="lblPrimary">
            <Setter Property="Content" Value="Enter Text To Search"/>
            <Setter Property="Opacity" Value="0.5"/>
            <Setter Property="Margin" Value="60,5,0,10"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontFamily" Value="Verdana"/>
        </Style>
            <!--Search TextBox Icon Style-->
            <Style TargetType="Image" x:Key="imgPrimary">
            <Setter Property="Source" Value="searchicon.png"/>
            <Setter Property="Width" Value="15"/>
            <Setter Property="Height" Value="13"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="20,0,0,0"/>
        </Style>
            <!--Search Button Style-->
            <Style TargetType="Button" x:Key="btnPrimary">
            <Setter Property="Background" Value="#FF006887"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Content" Value="Search"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Height" Value="NaN"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="BorderBrush" Value="Maroon"/>
            <Setter Property="Margin" Value="10,5,0,5"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <!--Search Button Hovering Effect-->
                <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="AliceBlue"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
             <!--Wrap Panel Style-->
        <Style TargetType="WrapPanel" x:Key="wrpPrimary">
            <Setter Property="Background" Value="#FF006887"/>
            <Setter Property="Margin" Value="5"/>
        </Style>
             <!--Disease Buttons Style-->
        <Style TargetType="Button" x:Key="btnControl">
            <Setter Property="Background" Value="{StaticResource buttonStyleGradient}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="BorderBrush" Value="Maroon"/>
            <Setter Property="Margin" Value="15,25,15,25"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <!--Disease Buttons Round Corner Style-->
            <Style.Resources>
                <Style TargetType="Border">
                    <Setter Property="CornerRadius" Value="10" />
                </Style>
            </Style.Resources>
            <!--Disease Buttons Hovering Effect-->
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="AliceBlue"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
    </Application.Resources>
</Application>



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
App.config
------------------
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
	<!--
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>
	<log4net>
		<appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="logfile.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="ALL" />
			<appender-ref ref="FileAppender" />
		</root>
	</log4net>
	-->
</configuration>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AssemblyInfo.cs
-----------------
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Task")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("QuEST-Global")]
[assembly: AssemblyProduct("Task")]
[assembly: AssemblyCopyright("Copyright © QuEST-Global 2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: log4net.Config.XmlConfigurator]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ButtonVisibilityCoverterTest.cs
------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Task;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Windows;

namespace Task.Tests
{    /// <summary>
     ///  A class to test different scenarios while searching buttons.
     /// </summary>
    [TestClass()]
    public class ButtonVisibilityConverterTests
    {
        public ButtonVisibilityConverter _converter;
        [TestInitialize]
        public void setup()
        {
            _converter = new ButtonVisibilityConverter();
        }
        /// <summary>
        ///  case 1: When search text is null or empty then entire button is visible.
        /// </summary>
        [TestMethod()]
        public void Convert_SearchTextIsNullOrEmpty_ReturnVisible()
        {
            //Arrange
            object searchText = null;
            var buttonContent = "Button";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), buttonContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Visible, result);
        }
        /// <summary>
        ///  case 2: When search text is empty then entire button is visible.
        /// </summary>
        [TestMethod()]
        public void Convert_SearchTextIsEmpty_ReturnVisible()
        {
            //Arrange
            object searchText = String.Empty;
            var buttonContent = "Button";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), buttonContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Visible, result);
        }
        /// <summary>
        ///  case 3: When search text matches button content then button is visible.
        /// </summary>
        [TestMethod()]
        public void Convert_SearchTextMatchesButtonContent_ReturnVisible()
        {
            //Arrange
            object searchText = "But";
            var buttonContent = "Button";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), buttonContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Visible, result);
        }
        //case 4: When search text does not matches button content then button is collapsed.
        [TestMethod()]
        public void Convert_SearchTextDoesnotMatchesButtonContent_ReturnCollapsed()
        {
            //Arrange
            object searchText = "Search";
            var buttonContent = "Button";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), buttonContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Collapsed, result);
        }
        /// <summary>
        /// case 5: When search text does not matches button content and is case insensitive then button is visible.
        /// </summary>
        [TestMethod()]
        public void Convert_CaseInsensitiveSearch_ReturnVisible()
        {
            //Arrange
            object searchText = "button";
            var buttonContent = "Button";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), buttonContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Visible, result);

        }
        /// <summary>
        /// case 6: When search text does not matches button content and is case insensitive then button is visible.
        /// </summary>
        [TestMethod()]
        public void Convert_CaseInsensitiveButtonContent_ReturnVisible()
        {
            //Arrange
            object searchText = "bUTton";
            var buttonContent = "Button";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), buttonContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Visible, result);
        }   
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MainWindowTest.cs
--------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Task;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Windows;

namespace Task.Tests
{   /// <summary>
    /// A class to test the search label visibility.
    /// </summary>
    [TestClass()]
    public class MainWindowTests
    {
        public ButtonVisibilityConverter _converter;
        [TestInitialize]
        public void setup()
        {
            _converter = new ButtonVisibilityConverter();
        }
        /// <summary>
        /// case1: search label gets collapsed because search textbox is not empty.
        /// </summary>
        [TestMethod()]
        public void searchLabel_Collapsed ()
        {

            //Arrange
            object searchText = "bUTton";
            var labelContent = "";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), labelContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Collapsed, result);
        }
        /// <summary>
        /// case2: search label is visible because search textbox is empty.
        /// </summary>
        [TestMethod()]
        public void searchLabel_Visible() 
        {

            //Arrange
            object searchText = "";
            var labelContent = "Enter text to search";
            //Act
            var result = _converter.Convert(searchText, typeof(Visibility), labelContent, CultureInfo.InvariantCulture);
            //Assert
            Assert.AreEqual(Visibility.Visible, result);
        }
    }
}-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
client
-------------
MainWindow.xaml
----------------
<Window x:Class="TaskClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TaskClient"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Style="{StaticResource winPrimary}">
    <Canvas>
        <Canvas Style="{StaticResource canvPrimary}" Height="268" Canvas.Left="84" Canvas.Top="83" Width="632">
            <TextBox x:Name="SearchTextBox"  TextWrapping="Wrap" Width="400" Height="41" HorizontalAlignment="Center" VerticalAlignment="Top" Canvas.Left="106" Canvas.Top="107" FontSize="20" TextChanged="SearchTextBox_TextChanged_1"/>
            <Label x:Name="SendLabel" Canvas.Left="214" Canvas.Top="111" Opacity="0.5" FontSize="20" Content="Enter Your Text Here." >
            </Label>
        </Canvas>
    </Canvas>
</Window>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MainWindow.xaml.cs
--------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace TaskClient
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {   
        private TcpClientHandler tcpClientHandler;
        public MainWindow()
        {
            InitializeComponent();
            tcpClientHandler= new TcpClientHandler();
        }
        /// <summary>
        /// To check the visibility of the label placed in the search textbox.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SearchTextBox_TextChanged_1(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (SearchTextBox.Text != null)
                {
                    SendLabel.Visibility = string.IsNullOrWhiteSpace(SearchTextBox.Text) ? Visibility.Visible : Visibility.Collapsed;
                }
                Logger.log.Info("No issues!");
                string message = SearchTextBox.Text;

                if (!string.IsNullOrWhiteSpace(message))
                {
                    tcpClientHandler.SendMessage(message);
                }
            }
            catch (Exception)
            {
                Logger.log.Error("Error!");
            }
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TcpClientHandler.cs
----------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Sockets;
using System.IO;

namespace TaskClient
{
    /// <summary>
    /// A class to send messages by the client to the TCP server
    /// </summary>
    public class TcpClientHandler
    {
        private string serverAddress = "127.0.0.1";
        private int port = 5000;
        /// <summary>
        /// Sends Message from client to the server.
        /// </summary>
        /// <param name="message"></param>
        public void SendMessage(string message)
        {
            try
            {
                using (TcpClient tcpClient = new TcpClient(serverAddress, port))
                {
                    NetworkStream stream = tcpClient.GetStream();
                    byte[] buffer = Encoding.UTF8.GetBytes(message);
                    stream.Write(buffer,0,buffer.Length);
                    stream.Flush();

                }
            }
            catch (Exception ex) 
            {
                Logger.log.Error("Error in sending message to server", ex);
            }
        }
    }
}--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
