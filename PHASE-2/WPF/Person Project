Person Project
-------------
App.xaml
---------
<Application x:Class="PersonProject.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:PersonProject"
             StartupUri="DisplayPersonWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

---------------------------------------------------------------------------------------------------------------------------------------
DisplayPersonWindow.xaml
------------------------
<Window x:Class="PersonProject.DisplayPersonWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PersonProject"
        mc:Ignorable="d"
        Title="PersonApp" Height="450" Width="800" WindowState="Maximized" Closed="Window_Closed">
    <Canvas>
        <TextBlock Canvas.Left="165" TextWrapping="Wrap" Text="FirstName" Canvas.Top="124" HorizontalAlignment="Left" VerticalAlignment="Center" Width="155" Background="#FF3DBB40"/>
        <TextBlock Canvas.Left="350" TextWrapping="Wrap" Text="{Binding DisplayPerson.FirstName}" Canvas.Top="124" Width="155" Background="#FF3D89BB" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock Canvas.Left="165" TextWrapping="Wrap" Text="LastName" Canvas.Top="174" Width="155" Background="#FF3DBB40" HorizontalAlignment="Center" VerticalAlignment="Top"/>
        <TextBlock Canvas.Left="350" TextWrapping="Wrap" Text="{Binding DisplayPerson.LastName}" Canvas.Top="174" Width="155" Background="#FF3D89BB" HorizontalAlignment="Center" VerticalAlignment="Top"/>
        <Button x:Name="btnEdit" Content="Edit" Canvas.Left="165" Canvas.Top="217" HorizontalAlignment="Left" VerticalAlignment="Center" Width="155" Click="btnEdit_Click">
            <Button.Foreground>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black"/>
                    <GradientStop Color="White" Offset="1"/>
                </LinearGradientBrush>
            </Button.Foreground>
            <Button.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black"/>
                    <GradientStop Color="#FF1E1CC0" Offset="1"/>
                </LinearGradientBrush>
            </Button.Background>
        </Button>

    </Canvas>
</Window>

---------------------------------------------------------------------------------------------------------------------------------------
DisplayPersonWindow.xaml.cs
-------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace PersonProject
{
    /// <summary>
    /// Interaction logic for DisplayPersonWindow.xaml
    /// </summary>
    public partial class DisplayPersonWindow : Window
    {
        public DisplayPersonWindow()
        {
            InitializeComponent();
            DataContext=PersonConfig.ViewModel;
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            PersonConfig.ViewModel.EditClose = PersonConfig.FrmEditPerson.WindowClose;
            PersonConfig.ViewModel.Edit();
            PersonConfig.FrmEditPerson.Show();
        }
    }
}

---------------------------------------------------------------------------------------------------------------------------------------

EditPersonWindow.xaml
------------------------
<Window x:Class="PersonProject.EditPersonWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PersonProject"
        mc:Ignorable="d"
        Title="Edit Person" Height="450" Width="800" Closing="Window_Closing">
    <Canvas>
        <TextBlock Canvas.Left="165" TextWrapping="Wrap" Text="FirstName" Canvas.Top="124" HorizontalAlignment="Left" VerticalAlignment="Center" Width="155" Background="#FF3DBB40"/>
        <TextBox Canvas.Left="350" TextWrapping="Wrap" Text="{Binding EditablePerson.FirstName}" Canvas.Top="124" Width="155" Background="#FF3D89BB" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock Canvas.Left="165" TextWrapping="Wrap" Text="LastName" Canvas.Top="174" Width="155" Background="#FF3DBB40" HorizontalAlignment="Center" VerticalAlignment="Top"/>
        <TextBox Canvas.Left="350" TextWrapping="Wrap" Text="{Binding EditablePerson.LastName}" Canvas.Top="174" Width="155" Background="#FF3D89BB" HorizontalAlignment="Center" VerticalAlignment="Top"/>
        <Button x:Name="btnUpdate" Content="Update" Canvas.Left="165" Canvas.Top="217" HorizontalAlignment="Left" VerticalAlignment="Center" Width="155" Command="{Binding UpdateCommand}">
            <Button.Foreground>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black"/>
                    <GradientStop Color="White" Offset="1"/>
                </LinearGradientBrush>
            </Button.Foreground>
            <Button.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black"/>
                    <GradientStop Color="#FF1E1CC0" Offset="1"/>
                </LinearGradientBrush>
            </Button.Background>
        </Button>
    </Canvas>
</Window>
---------------------------------------------------------------------------------------------------------------------------------------
EditPersonWindow.xaml.cs
-------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace PersonProject
{
    /// <summary>
    /// Interaction logic for EditPersonWindow.xaml
    /// </summary>
    public partial class EditPersonWindow : Window
    {
        public EditPersonWindow()
        {
            InitializeComponent();
            DataContext = PersonConfig.ViewModel;
        }
        public void WindowClose()
        {
            this.Hide();
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

---------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------

PersonViewMode.cs
------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using ItenaryProject;

namespace PersonProject
{
    public class PersonViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        private PersonModel _displayPerson;
        public PersonModel DisplayPerson
        {
            get => _displayPerson;
            set { _displayPerson = value; OnPropertyChanged(nameof(DisplayPerson)); }

        }
        private PersonModel _editablePerson;
        public PersonModel EditablePerson
        {
            get => _editablePerson;
            set { _editablePerson = value; OnPropertyChanged(nameof(EditablePerson)); }

        }
        public ICommand UpdateCommand { get; }
        public PersonViewModel() 
        {
            DisplayPerson = new PersonModel() { FirstName = "Gopika", LastName = "V" };
            EditablePerson = new PersonModel() { FirstName = "", LastName = "" };
            UpdateCommand= new RelayCommand(Update);
        }
        public void Update()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to update?", caption: "Confirm", button: MessageBoxButton.YesNo, icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            DisplayPerson.FirstName = EditablePerson.FirstName;
            DisplayPerson.LastName = EditablePerson.LastName;
            DisplayPerson = DisplayPerson;
            result = MessageBox.Show(messageBoxText: "Update successfully", caption: "Alert", button: MessageBoxButton.OK, icon: MessageBoxImage.Information);
            if (EditClose != null) { EditClose(); }
        }
        public DClose EditClose;
        public void Edit()
        {
            EditablePerson.FirstName = DisplayPerson.FirstName;
            EditablePerson.LastName = DisplayPerson.LastName;
            EditablePerson= EditablePerson;
        }
    }


    }

---------------------------------------------------------------------------------------------------------------------------------------
RelayCommand.cs
-----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace ItenaryProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }
        //

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
        //
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------------
PersonModel.cs
-----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PersonProject
{
    public class PersonModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }
}

-------------------------------------------------------------------------------------------------------------------------------------
PersonConfig.cs
-----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PersonProject
{
    static class PersonConfig
    {
        public static EditPersonWindow FrmEditPerson { get; set; }
        public static PersonViewModel ViewModel { get; set; }
        static PersonConfig()
        {
            ViewModel = new PersonViewModel();
            FrmEditPerson = new EditPersonWindow();
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------
DClose.cs
---------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PersonProject
{
    public delegate void DClose();

}

-------------------------------------------------------------------------------------------------------------------------------------
