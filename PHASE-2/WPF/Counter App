Counter App
------------
App.xaml
---------
<Application x:Class="CounterProject.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CounterProject"
             StartupUri="DisplayCounterWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>
---------------------------------------------------------------------------------------------------------------------------------------
CounterCounfig.cs
------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CounterProject
{
    static class CounterConfig
    {
        public static DisplayCounterWindow FrmDisplayCounter { get; set; }
        public static CounterViewModel ViewModel { get; set; }
        static  CounterConfig()
        {
            ViewModel = new CounterViewModel();
            FrmDisplayCounter = new DisplayCounterWindow();
        }
    
    }
}
----------------------------------------------------------------------------------------------------------------------------------------
CounterModel.cs
--------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CounterProject
{
    public class CounterModel
    {
        public int Counter { get; set; }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
CounterViewModel.cs
---------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace CounterProject
{
    public class CounterViewModel: INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        private CounterModel _displayCounter;
        public CounterModel DisplayCounter
        {
            get => _displayCounter;
            set { _displayCounter = value; OnPropertyChanged(nameof(DisplayCounter)); }

        }
        public ICommand AddCommand { get; }
        public ICommand SubCommand { get; }
        public CounterViewModel()
        {
            DisplayCounter = new CounterModel() { Counter = 0 };
            AddCommand = new RelayCommand(Add);
            SubCommand = new RelayCommand(Sub);
        }
        public void Add()
        {
           
            DisplayCounter.Counter = DisplayCounter.Counter + 1;
            DisplayCounter = DisplayCounter;


            if (EditClose != null) { EditClose(); }
        }
        public DClose EditClose;
        public void Sub()
        {

            DisplayCounter.Counter = DisplayCounter.Counter - 1;
            DisplayCounter = DisplayCounter;


        }

    }
}
----------------------------------------------------------------------------------------------------------------------------------------
DClose.cs
-------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CounterProject
{
    public delegate void DClose();
}

----------------------------------------------------------------------------------------------------------------------------------------
DisplayCounterWindow.xaml
---------------------------
<Window x:Class="CounterProject.DisplayCounterWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CounterProject"
        mc:Ignorable="d"
        Title="DisplayCounterWindow" Height="450" Width="800" Closed="Window_Closed">
    <Canvas>
        <Border  Canvas.Left="368" Canvas.Right="100" BorderBrush="Red" Background="AliceBlue" BorderThickness="1" HorizontalAlignment="Left" Canvas.Top="88" VerticalAlignment="Center" >
            <TextBox x:Name="lblCount"  TextWrapping="Wrap" TextAlignment="Center" 
             Width="50" Height="50" FontSize="22" Text="{Binding DisplayCounter.Counter}"  />

        </Border>
        <Button x:Name="btnPlus" Content="+" Canvas.Left="274" Canvas.Top="177" Width="80" 
         Height="80" FontSize="32" FontWeight="Bold" HorizontalAlignment="Left" VerticalAlignment="Center" Command="{Binding AddCommand}"/>
        <Button x:Name="btnMinus" Content="-" Canvas.Left="444" Canvas.Top="177" Width="80"
        Height="80" FontSize="32" FontWeight="Bold" HorizontalAlignment="Left" VerticalAlignment="Center" Command="{Binding SubCommand}"/>

    </Canvas>
</Window>
-------------------------------------------------------------------------------------------------------------------------------------
DisplayCounterWindow.xaml.cs
-----------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace CounterProject
{
    /// <summary>
    /// Interaction logic for DisplayCounterWindow.xaml
    /// </summary>
    public partial class DisplayCounterWindow : Window
    {
        public DisplayCounterWindow()
        {
            InitializeComponent();
            DataContext = CounterConfig.ViewModel;
        }
       

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown(); 
        }

       
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
RelayCommand.cs
----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace CounterProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }
        //

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
        //
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------

