PHASE 2
--------------
AccountManagementWindow.xaml
---------------------
<Window x:Class="BankManagementProject.AccountManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementProject"
        mc:Ignorable="d"
        Title="AccountManagementWindow" Height="450" Width="800" Closing="Window_Closing">
    <Canvas>
        <Button x:Name="btnAdd" Content="ADD" Canvas.Left="210" Canvas.Top="260" HorizontalAlignment="Center" 
                VerticalAlignment="Top" Width="102" Height="57" Click="btnAdd_Click" Background="#FF566DC8"/>
        <Button x:Name="btnEdit" Content="EDIT" Canvas.Left="380" Canvas.Top="260" HorizontalAlignment="Left" 
                Height="57" VerticalAlignment="Center" Width="100" RenderTransformOrigin="0.48,-0.115" Click="btnEdit_Click" Background="#FF566DC8"/>
        <DataGrid x:Name="grdAccount" Height="201" Width="449" SelectionMode="Single" ItemsSource="{Binding Accounts}"
                  HorizontalAlignment="Center" VerticalAlignment="Top" Canvas.Left="169" 
                  AutoGenerateColumns="False" SelectedItem="{Binding SelectedAccount , Mode=TwoWay}" IsReadOnly="True" 
                  AreRowDetailsFrozen="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Account No" Binding="{Binding AccNo}"/>
                <DataGridTextColumn Header="Name"  Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Balance"  Binding="{Binding Balance}"/>
                <DataGridTextColumn Header="Account Type"  Binding="{Binding AccType}"/>
                <DataGridTextColumn Header="Email"  Binding="{Binding Email}"/>
                <DataGridTextColumn Header="Phone No"  Binding="{Binding PhNo}"/>
                <DataGridTextColumn Header="Address"  Binding="{Binding Address}"/>
                <DataGridTextColumn Header="IsActive" Binding="{Binding IsActive}"/>
                <DataGridTextColumn Header="Interest Percentage" Binding="{Binding InterestPercentage}"/>
                <DataGridTextColumn Header="Transaction Count" Binding="{Binding TransactionCount}"/>
                <DataGridTextColumn Header="Last Transaction Date" Binding="{Binding LastTransactionDate}"/>

            </DataGrid.Columns>
        </DataGrid>
        <Button x:Name="btnDelete" Content="DELETE" Canvas.Left="524" Canvas.Top="260" 
            Height="57" Width="100" RenderTransformOrigin="0.48,-0.115" HorizontalAlignment="Left" VerticalAlignment="Center" Click="btnDelete_Click" Command="{Binding DeleteCommand}" Background="#FF566DC8"/>

    </Canvas>
</Window>

-------------------------------------------------------------------------------------------------------------------------------
AccountManagementWindow.xaml.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;


namespace BankManagementProject
{
    /// <summary>
    /// Interaction logic for AccountManagementWindow.xaml
    /// </summary>
    public partial class AccountManagementWindow : Window
    {
        public AccountManagementWindow()
        {
            InitializeComponent();
            DataContext = AccountConfig.VueModel;
        }

        private void btnAdd_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.FrmAddAccount.Show();
            
        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            if (grdAccount.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select Account details to edit",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            AccountConfig.FrmEditAccount.Show();

        }

       

        private void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            if (grdAccount.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select Account details to Delete",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            AccountViewModel viewModel = new AccountViewModel();
            viewModel.Delete();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------

AddAccountWindow.xaml
---------------------
<Window x:Class="BankManagementProject.AddAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementProject"
        mc:Ignorable="d"
        Title="AddAccountWindow" Height="450" Width="800">
    <Canvas>
        <TextBlock x:Name="lblAccountNo" Canvas.Left="210" TextWrapping="Wrap" Text="Account No" Canvas.Top="10" HorizontalAlignment="Center" VerticalAlignment="Center" Width="106"/>
        <TextBox x:Name="txtAccountNo" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding NewAccount.AccNo}" Canvas.Top="8" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblName" Canvas.Left="210" TextWrapping="Wrap" Text="Name" Canvas.Top="50" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtName" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding NewAccount.Name}" Canvas.Top="45" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblBalance" Canvas.Left="210" TextWrapping="Wrap" Text="Balance" Canvas.Top="88" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtBalance" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding NewAccount.Balance}" Canvas.Top="86" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblEmail" Canvas.Left="210" TextWrapping="Wrap" Text="Email" Canvas.Top="162" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtEmail" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding NewAccount.Email}" Canvas.Top="162" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblAddress" Canvas.Left="210" TextWrapping="Wrap" Text="Address" Canvas.Top="205" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtAddress" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding NewAccount.Address}"  AcceptsReturn="True" Canvas.Top="205" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblPhone" Canvas.Left="210" TextWrapping="Wrap" Text="Phone No" Canvas.Top="250" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtPhone" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding NewAccount.PhNo}" Canvas.Top="250" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblAccountType" Canvas.Left="210" TextWrapping="Wrap" Text="Account Type" Canvas.Top="124" Width="106" HorizontalAlignment="Center" VerticalAlignment="Top" RenderTransformOrigin="0.519,1.694"/>
        <TextBlock x:Name="lblRate" Canvas.Left="210" TextWrapping="Wrap" Text="Interest Rate" Canvas.Top="288" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <ComboBox x:Name="cmbRate" Canvas.Left="402" Canvas.Top="287" Width="153" HorizontalAlignment="Center" VerticalAlignment="Center">
            <ComboBoxItem Content="1"/>
            <ComboBoxItem Content="2"/>
            <ComboBoxItem Content="3"/>
            <ComboBoxItem Content="4"/>
            <ComboBoxItem Content="5"/>
            <ComboBoxItem Content="6"/>
            <ComboBoxItem Content="7"/>
            <ComboBoxItem Content="8"/>
            <ComboBoxItem Content="9"/>
            <ComboBoxItem Content="10"/>
            <ComboBoxItem Content="11"/>
            <ComboBoxItem Content="12"/>

        </ComboBox>
        <TextBlock x:Name="lblStatus" Canvas.Left="210" TextWrapping="Wrap" Text="Status" Canvas.Top="330" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <CheckBox x:Name="chkActive" Content="Active" Canvas.Left="452" Canvas.Top="331" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <RadioButton x:Name="rdSavings" Content="Savings" Canvas.Left="402" Canvas.Top="124" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        <RadioButton x:Name="rdCurrent" Content="Current" Canvas.Left="496" Canvas.Top="125" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        <Button x:Name="btnCreateAccount" Content="Create Account" Canvas.Left="402" Canvas.Top="367" 
                HorizontalAlignment="Center" VerticalAlignment="Center" Width="153" Height="45" Command="{Binding CreateCommand}" Background="#FF566DC8"/>

    </Canvas>
</Window>

-------------------------------------------------------------------------------------------------------------------------------
AddAccountWindow.xaml.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using BankManagementProject;

namespace BankManagementProject
{
    /// <summary>
    /// Interaction logic for AddAccountWindow.xaml
    /// </summary>
    public partial class AddAccountWindow : Window
    {
        public AddAccountWindow()
        {
            InitializeComponent();
            DataContext = AccountConfig.VueModel;

        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------
EditAccountWindow.xaml
---------------------
<Window x:Class="BankManagementProject.EditAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementProject"
        mc:Ignorable="d"
        Title="EditAccountWindow" Height="450" Width="800">
    <Canvas>
        <TextBlock x:Name="lblAccountNo" Canvas.Left="210" TextWrapping="Wrap" Text="Account No" Canvas.Top="20" Width="106" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="txtAccountNo" Canvas.Left="401" TextWrapping="Wrap" Canvas.Top="18" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center" IsEnabled="False" Text="{Binding SelectedAccount.AccNo}"/>
        <TextBlock x:Name="lblName" Canvas.Left="210" TextWrapping="Wrap" Text="Name" Canvas.Top="49" Width="106" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="txtName"  Canvas.Left="401" TextWrapping="Wrap" Canvas.Top="49" Width="155" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False" Text="{Binding SelectedAccount.Name}"/>
        <TextBlock x:Name="lblBalance" Canvas.Left="210" TextWrapping="Wrap" Text="Balance" Canvas.Top="88" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtBalance" Canvas.Left="401" TextWrapping="Wrap" Text="{Binding SelectedAccount.Balance}" IsEnabled="False" Canvas.Top="86" Width="155" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblEmail" Canvas.Left="210" TextWrapping="Wrap" Text="Email" Canvas.Top="162" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtEmail"  Canvas.Left="401" TextWrapping="Wrap" Canvas.Top="162" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center" IsEnabled="False" Text="{Binding SelectedAccount.Email}"/>
        <TextBlock x:Name="lblAddress" Canvas.Left="210" TextWrapping="Wrap" Text="Address" Canvas.Top="205" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtAddress" Text="{Binding SelectedAccount.Address}" Canvas.Left="401" TextWrapping="Wrap"  AcceptsReturn="True" Canvas.Top="205" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblPhone" Canvas.Left="210" TextWrapping="Wrap" Text="Phone No" Canvas.Top="250" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBox x:Name="txtPhone" Canvas.Left="401" TextWrapping="Wrap" Canvas.Top="250" Width="155" HorizontalAlignment="Left" VerticalAlignment="Center" IsEnabled="False" Text="{Binding SelectedAccount.PhNo}"/>
        <TextBlock x:Name="lblAccountType" Canvas.Left="210" TextWrapping="Wrap" Text="Account Type" Canvas.Top="117" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblRate" Canvas.Left="210" TextWrapping="Wrap" Text="Interest Rate" Canvas.Top="288" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <ComboBox x:Name="cmbRate" Canvas.Left="402" Canvas.Top="287" Width="153" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False">
            <ComboBoxItem Content="1"/>
            <ComboBoxItem Content="2"/>
            <ComboBoxItem Content="3"/>
            <ComboBoxItem Content="4"/>
            <ComboBoxItem Content="5"/>
            <ComboBoxItem Content="6"/>
            <ComboBoxItem Content="7"/>
            <ComboBoxItem Content="8"/>
            <ComboBoxItem Content="9"/>
            <ComboBoxItem Content="10"/>
            <ComboBoxItem Content="11"/>
            <ComboBoxItem Content="12"/>

        </ComboBox>
        <TextBlock x:Name="lblStatus" Canvas.Left="210" TextWrapping="Wrap" Text="Status" Canvas.Top="330" Width="106" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <CheckBox x:Name="chkActive" Content="Active" Canvas.Left="452" Canvas.Top="331" HorizontalAlignment="Left" VerticalAlignment="Center" IsEnabled="False"/>
        <RadioButton x:Name="rdSavings" Content="Savings" Canvas.Left="411" Canvas.Top="117" HorizontalAlignment="Left" VerticalAlignment="Center" IsEnabled="False"/>
        <RadioButton x:Name="rdCurrent" Content="Current" Canvas.Left="490" Canvas.Top="117" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <Button x:Name="btnUpdate" Content="Update" Canvas.Left="402" Canvas.Top="367" Width="153" Height="45" HorizontalAlignment="Center" VerticalAlignment="Center" Command="{Binding UpdateCommand}" Background="#FF566DC8"/>

    </Canvas>
</Window>

-------------------------------------------------------------------------------------------------------------------------------
EditAccountWindow.xaml.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using BankManagementProject;


namespace BankManagementProject
{
    /// <summary>
    /// Interaction logic for EditAccountWindow.xaml
    /// </summary>
    public partial class EditAccountWindow : Window
    {
        public EditAccountWindow()
        {
            InitializeComponent();
            DataContext = AccountConfig.VueModel;

        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------
DepositWindow.xaml
---------------------
<Window x:Class="BankManagementProject.DepositWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementProject"
        mc:Ignorable="d"
        Title="DepositWindow" Height="450" Width="800" Closing="Window_Closing">
    <Canvas>
        <Button x:Name="btnDeposit" Content="Deposit" Command="{Binding DepositCommand}" Canvas.Left="330" Canvas.Top="239" Height="60" Width="125" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#FF566DC8" FontWeight="Bold" />
        <TextBlock x:Name="lblAccNo" Canvas.Left="190" TextWrapping="Wrap" Text="Account Number" Canvas.Top="128" HorizontalAlignment="Left" VerticalAlignment="Center" Width="130" FontWeight="Bold"/>
        <TextBlock x:Name="lblAmount" Canvas.Left="190" TextWrapping="Wrap" Text="Amount" Canvas.Top="169" Width="130" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold"/>
        <TextBox x:Name="txtAccNo" Text="{Binding AccountNumber}" Canvas.Left="400" TextWrapping="Wrap" Canvas.Top="126" Width="120"/>
        <TextBox x:Name="txtAmount" Text="{Binding Amount}" Canvas.Left="400" TextWrapping="Wrap" Canvas.Top="167" Width="120" HorizontalAlignment="Center" VerticalAlignment="Top"/>
        <Label Content="                  DEPOSIT" Canvas.Left="245" Canvas.Top="38" HorizontalAlignment="Center" VerticalAlignment="Center" Width="275" Foreground="#FFE0D7D7" FontSize="18" FontWeight="Bold">
            <Label.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black"/>
                    <GradientStop Color="#FF566DC8" Offset="1"/>
                </LinearGradientBrush>
            </Label.Background>
        </Label>

    </Canvas>
</Window>

-------------------------------------------------------------------------------------------------------------------------------
DepositWindow.xaml.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementProject
{
    /// <summary>
    /// Interaction logic for DepositWindow.xaml
    /// </summary>
    public partial class DepositWindow : Window
    {
        public DepositWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.depositViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------
WithdrawWindow.xaml
---------------------
<Window x:Class="BankManagementProject.WithdrawWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementProject"
        mc:Ignorable="d"
        Title="WithdrawWindow" Height="450" Width="800" Closing="Window_Closing">
    <Canvas>
        <Button x:Name="btnWithdraw" Content="Withdraw" Command="{Binding WithdrawCommand}" Canvas.Left="330" Canvas.Top="239" Height="60" Width="125" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#FF566DC8" FontWeight="Bold"/>
        <TextBlock x:Name="lblAccNo" Canvas.Left="190" TextWrapping="Wrap" Text="Account Number" Canvas.Top="128" HorizontalAlignment="Left" VerticalAlignment="Center" Width="130" FontWeight="Bold"/>
        <TextBlock x:Name="lblAmount" Canvas.Left="190" TextWrapping="Wrap" Text="Amount" Canvas.Top="169" Width="130" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold"/>
        <TextBox x:Name="txtAccNo" Text="{Binding AccountNumber}" Canvas.Left="400" TextWrapping="Wrap" Canvas.Top="126" Width="120"/>
        <TextBox x:Name="txtAmount" Text="{Binding Amount}" Canvas.Left="400" TextWrapping="Wrap" Canvas.Top="167" Width="120" HorizontalAlignment="Center" VerticalAlignment="Top"/>
        <Label Content="                  WITHDRAW" Canvas.Left="245" Canvas.Top="38" HorizontalAlignment="Center" VerticalAlignment="Center" Width="275" Foreground="#FFE0D7D7" FontSize="18" FontWeight="Bold">
            <Label.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black"/>
                    <GradientStop Color="#FF566DC8" Offset="1"/>
                </LinearGradientBrush>
            </Label.Background>
        </Label>

    </Canvas>
</Window>

-------------------------------------------------------------------------------------------------------------------------------
WithdrawWindow.xaml.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementProject
{
    /// <summary>
    /// Interaction logic for WithdrawWindow.xaml
    /// </summary>
    public partial class WithdrawWindow : Window
    {
        public WithdrawWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.withdrawViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------
AccountConfig.cs
----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace BankManagementProject
{
    public static class AccountConfig
    {   
        public static AccountManagementWindow FrmAccountManagement { get; set; }
        public static AddAccountWindow FrmAddAccount { get; set; }
        public static EditAccountWindow FrmEditAccount { get; set; }

        public static DepositWindow FrmDepositAccount { get; set; }

        public static WithdrawWindow FrmWithdrawWindow { get; set; }

        public static AccountViewModel VueModel { get; set; }
        public static DepositViewModel depositViewModel { get; set; }
        public static WithdrawViewModel withdrawViewModel { get; set; }
        static AccountConfig()
        {
            VueModel = new AccountViewModel();
            depositViewModel= new DepositViewModel();
            withdrawViewModel= new WithdrawViewModel();
            FrmAccountManagement =new AccountManagementWindow();
            FrmDepositAccount=new DepositWindow();
            FrmWithdrawWindow=new WithdrawWindow();
            FrmAddAccount = new AddAccountWindow();
            FrmEditAccount = new EditAccountWindow();
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------
AccountMemoryRepo.cs
--------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows;


namespace BankManagementProject
{
    public class AccountMemoryRepo : IAccountRepo
    {
        private static AccountMemoryRepo _instance;
        public ObservableCollection<AccountModel> accounts = new ObservableCollection<AccountModel>()
        {
            new AccountModel
            {
                AccNo = 1234,
                Name = "Anamika",
                Balance = 0,
                AccType = "savings",
                Email = "anamika@gmail.com",
                PhNo = "789456123",
                Address = "xxx street",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            },
            new AccountModel
            {
                AccNo = 4567,
                Name = "Paru",
                Balance = 0,
                AccType = "current",
                Email = "paru@gmail.com",
                PhNo = "4561233",
                Address = "yyy street",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            }
        };
        public static AccountMemoryRepo Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new AccountMemoryRepo();
                }
                return _instance;
            }
        }

        public void Create(AccountModel accModel)
        {
            accounts.Add(accModel);
        }
        public void UpdateAccount(AccountModel accModel)
        {
            foreach (var ac in accounts)
            {
                if (ac.AccNo == accModel.AccNo)
                {
                    ac.Address = accModel.Address;
                }
            }
        }
        public ObservableCollection<AccountModel> ReadAllAccount()
        {
            return accounts;
        }
        public void DeleteAccount(AccountModel accModel)
        {
            
            foreach (var ac in accounts)
            {
                if (ac.AccNo == accModel.AccNo)
                {
                    ac.Address = accModel.Address;
                }
            }
        }

        public void Deposit(int acNo, int Amount)
        {

            var account = accounts.FirstOrDefault(a => a.AccNo == acNo);
            if (account != null)
            {
                account.Balance = account.Balance + Amount;
                account.LastTransactionDate = DateTime.Now;
                account.TransactionCount = account.TransactionCount + 1;

                MessageBox.Show(messageBoxText: $"Deposited Successfully to account {acNo}",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);

            }
            else
            {
                MessageBox.Show(messageBoxText: $"Account Not Found , Please input valid account number",
                    caption: "Warning",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Warning);
                return;
            }

        }

        public void Withdraw(int acNo, int Amount)
        {
            var account = accounts.FirstOrDefault(a => a.AccNo == acNo);
            if (account != null)
            {
                if (account.Balance < Amount)
                {
                    MessageBox.Show(messageBoxText: $"Insufficient balance",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);
                    return;
                }
                account.Balance = account.Balance - Amount;
                account.LastTransactionDate = DateTime.Now;
                account.TransactionCount = account.TransactionCount + 1;

                MessageBox.Show(messageBoxText: $"Withdrawed Successfully from account {acNo}",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);

            }
            else
            {
                MessageBox.Show(messageBoxText: $"Account Not Found , Please input valid account number",
                    caption: "Warning",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Warning);
                return;
            }
        }

        public void CalculateInterestAndUpdateBalance()
        {
            throw new NotImplementedException();
        }

    }
}
-------------------------------------------------------------------------------------------------------------------------------
IAccountRepo.cs
--------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementProject
{
    public interface IAccountRepo
    {
        void Create(AccountModel accModel);

        void UpdateAccount(AccountModel accModel);

        void DeleteAccount(AccountModel account);
        void Deposit(int acNo, int Amount);
        void Withdraw(int acNo, int Amount);
        void CalculateInterestAndUpdateBalance();
        ObservableCollection<AccountModel> ReadAllAccount();

    }
}
--------------------------------------------------------------------------------------------------------------------------------
AccountModel.cs
-------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementProject
{
    public class AccountModel : INotifyPropertyChanged
    {
        private decimal _balance;
        public int AccNo { get; set; }
        public string Name { get; set; }
        public decimal Balance
        {
            get { return _balance; }
            set
            {
                _balance = value;
                OnPropertyChanged(nameof(Balance));
            }
        }
        public string AccType { get; set; }
        public String Email { get; set; }
        public String PhNo { get; set; }

        private string _address;

        public string Address
        {
            get { return _address; }
            set
            {
                _address = value;
                OnPropertyChanged(nameof(Address));
            }
        }

        public bool IsActive { get; set; }
        public string InterestPercentage { get; set; }

        private int _transactionCount;

        public int TransactionCount
        {
            get { return _transactionCount; }
            set
            {
                _transactionCount = value;
                OnPropertyChanged(nameof(TransactionCount));
            }
        }

        private DateTime _lastTrasnsactionDate;

        public DateTime LastTransactionDate
        {
            get { return _lastTrasnsactionDate; }
            set
            {
                _lastTrasnsactionDate = value;
                OnPropertyChanged(nameof(LastTransactionDate));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------
RelayCommand.cs
------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace BankManagementProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }
        //

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
        //
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------
AccountViewModel.cs
--------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;


namespace BankManagementProject
{
    public delegate void DWidnowClose();
    public class AccountViewModel : INotifyPropertyChanged
    {
        public DWidnowClose NewWindowClose;
        public DWidnowClose EditWindowClose;
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        private AccountModel _newAccount = null;
        public AccountModel NewAccount
        {
            get => _newAccount;
            set { _newAccount = value; OnPropertyChanged(nameof(NewAccount)); }
        }
        //
        private AccountModel _selectedAccount = null;
        public AccountModel SelectedAccount
        {
            get => _selectedAccount;
            set { _selectedAccount = value; OnPropertyChanged(nameof(SelectedAccount)); }
        }
        

        private IAccountRepo _repo = new AccountMemoryRepo();
        public ObservableCollection<AccountModel> Accounts
        {
            get
            {
                return _repo.ReadAllAccount();
            }
        }
        public ICommand CreateCommand { get; }
        public ICommand UpdateCommand { get; }
        public ICommand DeleteCommand { get; }

        public AccountViewModel()
        {
            this.NewAccount = new AccountModel
            {
                AccNo = 0,
                Name = "",
                Balance = 0,
                AccType = "savings",
                Email = " sample@gmail.com",
                PhNo = "xxxx-xxxx",
                Address = "",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now
            };



            CreateCommand = new RelayCommand(Create);
            UpdateCommand = new RelayCommand(Update);
            DeleteCommand = new RelayCommand(Delete);
        }
        public void Create()
        {
            AccountModel newAccount = new AccountModel
            {
                AccNo = NewAccount.AccNo,
                Name = NewAccount.Name,
                Balance = NewAccount.Balance,
                AccType = NewAccount.AccType,
                Email = NewAccount.Email,
                PhNo = NewAccount.PhNo,
                Address = NewAccount.Address,
                IsActive = NewAccount.IsActive,
                InterestPercentage = NewAccount.InterestPercentage,
                TransactionCount = NewAccount.TransactionCount,
                LastTransactionDate = NewAccount.LastTransactionDate
            };
            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            _repo.Create(newAccount);
            this.NewAccount = new AccountModel { AccNo = 0, Name = "", Balance = 0, AccType = "", Email = "", PhNo = "", Address = "", IsActive = false, InterestPercentage = "0", TransactionCount = 0, LastTransactionDate = DateTime.Now };
            
            result = MessageBox.Show(messageBoxText: "Created Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);

            if (NewWindowClose != null)
            {
                NewWindowClose();
            }
        }

        public void Update()
        {
            if (this.SelectedAccount == null)
            {
                return;
            }

            _repo.UpdateAccount(this.SelectedAccount);
            this.SelectedAccount = this.SelectedAccount;
            var result = MessageBox.Show(messageBoxText: "Updated Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);

            if (EditWindowClose != null)
            {
                EditWindowClose();
            }
        }
        public void Delete()
        {
            if (this.SelectedAccount == null)
            {
                return;
            }
            this.Accounts.Remove(this.SelectedAccount);
            this.SelectedAccount = null;
        }

    }

}
------------------------------------------------------------------------------------------------------------------------------
DepositViewModel.cs
--------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;

namespace BankManagementProject
{
    public class DepositViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public void onPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                onPropertyChanged(nameof(AccountNumber));
            }

        }

        private int _amount;

        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                onPropertyChanged(nameof(Amount));
            }
        }

        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        public ICommand DepositCommand { get; }

        public DepositViewModel()
        {
            DepositCommand = new RelayCommand(Deposit);
        }

        public void Deposit()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Deposit?",
                   caption: "Confirm",
                   button: MessageBoxButton.YesNo,
                   icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            _repo.Deposit(AccountNumber, Amount);


            this.AccountNumber = 0;
            this.Amount = 0;
        }

    }
}

------------------------------------------------------------------------------------------------------------------------------
WithdrawViewModel.cs
--------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;

namespace BankManagementProject
{
    public class WithdrawViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public void onPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                onPropertyChanged(nameof(AccountNumber));
            }

        }

        private int _amount;

        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                onPropertyChanged(nameof(Amount));
            }
        }

        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        public ICommand WithdrawCommand { get; }

        public WithdrawViewModel()
        {
            WithdrawCommand = new RelayCommand(Withdraw);
        }

        public void Withdraw()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Withdraw?",
                   caption: "Confirm",
                   button: MessageBoxButton.YesNo,
                   icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            _repo.Withdraw(AccountNumber, Amount);
            this.AccountNumber = 0;
            this.Amount = 0;
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------













