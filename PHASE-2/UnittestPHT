unitTest
-------------
EFGoalsRepo
--------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using ProjectPHT.EFRepo;
using ProjectPHT.Entities;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectPHT.EFRepo.Tests
{
    [TestClass()]
    public class EFGoalsRepoTests
    {

        private Mock<PHT_DbEntities> _mockContext;
        private Mock<DbSet<Goal>> _mockGoalSet;
        private EFGoalsRepo _goalRepo;

        [TestInitialize]
        public void Initialize()
        {
            // Initialize mocks for the DbContext and DbSet
            _mockContext = new Mock<PHT_DbEntities>();
            _mockGoalSet = new Mock<DbSet<Goal>>();

            // Create an instance of the repo with the mocked context
            _goalRepo = new EFGoalsRepo();

            // Setup the context to return the mocked DbSet
            _mockContext.Setup(m => m.Goals).Returns(_mockGoalSet.Object);
        }


        [TestMethod()]
        public void CreateGoalTest()
        {
            // Arrange
            var goal = new Goal { GoalID = 2015, GoalType = "Increse Steps", TargetValue = 4};

            // Act
            _goalRepo.CreateGoal(goal);

            // Assert
            _mockGoalSet.Verify(m => m.Add(It.IsAny<Goal>()), Times.Once);
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod()]
        public void UpdateGoalTest()
        {
            // Arrange
            var goal = new Goal { GoalID = 6, GoalType = "Lower BP", TargetValue = 3 };
            _mockGoalSet.Setup(m => m.Find(It.IsAny<int>())).Returns(goal);

            // Act
            _goalRepo.UpdateGoal(goal);

            // Assert
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod()]
        public void DeleteGoalTest()
        {

            // Arrange
            var goal = new Goal { GoalID = 13, GoalType = "Lower Calories", TargetValue = 4 };
            _mockGoalSet.Setup(m => m.Find(It.IsAny<int>())).Returns(goal);

            // Act
            _goalRepo.DeleteGoal(goal);

            // Assert
            _mockGoalSet.Verify(m => m.Remove(It.IsAny<Goal>()), Times.Once);
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);

        }

        [TestMethod()]
        public void ReadAllGoalTest()
        {
            // Arrange
            var data = new List<Goal>
            {
                new Goal { GoalID = 6, GoalType = "Increse Steps", TargetValue = 3 },
                new Goal { GoalID = 12, GoalType = "Increse Steps", TargetValue = 3 }
            }.AsQueryable();

            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.Provider).Returns(data.Provider);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.Expression).Returns(data.Expression);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.ElementType).Returns(data.ElementType);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());

            // Act
            var result = _goalRepo.ReadAllGoal();

            // Assert
            Assert.AreEqual(2, result.Count);
        }
    }
}
------------------------------------------------------------------------------------------------

