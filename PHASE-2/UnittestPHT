unitTest
-------------
EFGoalsRepo
-----------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using ProjectPHT.Entities;
using ProjectPHT.EFRepo;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;

namespace ProjectPHT.Tests
{
    [TestClass]
    public class EFGoalsRepoTests
    {
        private Mock<PHT_DbEntities> _mockContext;
        private Mock<DbSet<Goal>> _mockGoalSet;
        private EFGoalsRepo _goalRepo;

        [TestInitialize]
        public void Initialize()
        {
            // Initialize mocks for the DbContext and DbSet
            _mockContext = new Mock<PHT_DbEntities>();
            _mockGoalSet = new Mock<DbSet<Goal>>();

            // Create an instance of the repo with the mocked context
            _goalRepo = new EFGoalsRepo();

            // Setup the context to return the mocked DbSet
            _mockContext.Setup(m => m.Goals).Returns(_mockGoalSet.Object);
        }

        [TestMethod]
        public void CreateGoal_Should_Add_Goal_To_Context()
        {
            // Arrange
            var goal = new Goal { GoalID = 1, GoalType = "Weight Loss", TargetValue = 70 };

            // Act
            _goalRepo.CreateGoal(goal);

            // Assert
            _mockGoalSet.Verify(m => m.Add(It.IsAny<Goal>()), Times.Once);
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod]
        public void UpdateGoal_Should_Update_Existing_Goal()
        {
            // Arrange
            var goal = new Goal { GoalID = 1, GoalType = "Weight Loss", TargetValue = 70 };
            _mockGoalSet.Setup(m => m.Find(It.IsAny<int>())).Returns(goal);

            // Act
            _goalRepo.UpdateGoal(goal);

            // Assert
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod]
        public void DeleteGoal_Should_Remove_Existing_Goal()
        {
            // Arrange
            var goal = new Goal { GoalID = 1, GoalType = "Weight Loss", TargetValue = 70 };
            _mockGoalSet.Setup(m => m.Find(It.IsAny<int>())).Returns(goal);

            // Act
            _goalRepo.DeleteGoal(goal);

            // Assert
            _mockGoalSet.Verify(m => m.Remove(It.IsAny<Goal>()), Times.Once);
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod]
        public void ReadAllGoal_Should_Return_All_Goals()
        {
            // Arrange
            var data = new List<Goal>
            {
                new Goal { GoalID = 1, GoalType = "Weight Loss", TargetValue = 70 },
                new Goal { GoalID = 2, GoalType = "Running", TargetValue = 5 }
            }.AsQueryable();

            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.Provider).Returns(data.Provider);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.Expression).Returns(data.Expression);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.ElementType).Returns(data.ElementType);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());

            // Act
            var result = _goalRepo.ReadAllGoal();

            // Assert
            Assert.AreEqual(2, result.Count);
        }
    }
}
