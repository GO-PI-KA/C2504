unitTest
-------------
EFGoalsRepo
--------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using ProjectPHT.EFRepo;
using ProjectPHT.Entities;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectPHT.EFRepo.Tests
{
    [TestClass()]
    public class EFGoalsRepoTests
    {

        private Mock<PHT_DbEntities> _mockContext;
        private Mock<DbSet<Goal>> _mockGoalSet;
        private EFGoalsRepo _goalRepo;

        [TestInitialize]
        public void Initialize()
        {
            // Initialize mocks for the DbContext and DbSet
            _mockContext = new Mock<PHT_DbEntities>();
            _mockGoalSet = new Mock<DbSet<Goal>>();

            // Create an instance of the repo with the mocked context
            _goalRepo = new EFGoalsRepo();

            // Setup the context to return the mocked DbSet
            _mockContext.Setup(m => m.Goals).Returns(_mockGoalSet.Object);
        }


        [TestMethod()]
        public void CreateGoalTest()
        {
            // Arrange
            var goal = new Goal { GoalID = 2015, GoalType = "Increse Steps", TargetValue = 4};

            // Act
            _goalRepo.CreateGoal(goal);

            // Assert
            _mockGoalSet.Verify(m => m.Add(It.IsAny<Goal>()), Times.Once);
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod()]
        public void UpdateGoalTest()
        {
            // Arrange
            var goal = new Goal { GoalID = 6, GoalType = "Lower BP", TargetValue = 3 };
            _mockGoalSet.Setup(m => m.Find(It.IsAny<int>())).Returns(goal);

            // Act
            _goalRepo.UpdateGoal(goal);

            // Assert
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);
        }

        [TestMethod()]
        public void DeleteGoalTest()
        {

            // Arrange
            var goal = new Goal { GoalID = 13, GoalType = "Lower Calories", TargetValue = 4 };
            _mockGoalSet.Setup(m => m.Find(It.IsAny<int>())).Returns(goal);

            // Act
            _goalRepo.DeleteGoal(goal);

            // Assert
            _mockGoalSet.Verify(m => m.Remove(It.IsAny<Goal>()), Times.Once);
            _mockContext.Verify(m => m.SaveChanges(), Times.Once);

        }

        [TestMethod()]
        public void ReadAllGoalTest()
        {
            // Arrange
            var data = new List<Goal>
            {
                new Goal { GoalID = 6, GoalType = "Increse Steps", TargetValue = 3 },
                new Goal { GoalID = 12, GoalType = "Increse Steps", TargetValue = 3 }
            }.AsQueryable();

            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.Provider).Returns(data.Provider);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.Expression).Returns(data.Expression);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.ElementType).Returns(data.ElementType);
            _mockGoalSet.As<IQueryable<Goal>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());

            // Act
            var result = _goalRepo.ReadAllGoal();

            // Assert
            Assert.AreEqual(2, result.Count);
        }
    }
}
------------------------------------------------------------------------------------------------

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using ProjectPHT.Entities;
using ProjectPHT.EFRepo;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;

namespace ProjectPHT.Tests
{
    [TestClass]
    public class EFUserRepoTests
    {
        private Mock<PHT_DbEntities> _mockContext;
        private Mock<DbSet<User>> _mockUserSet;
        private EFUserRepo _userRepo;

        [TestInitialize]
        public void Initialize()
        {
            // Mock the DbSet<User> and the DbContext (PHT_DbEntities)
            _mockUserSet = new Mock<DbSet<User>>();
            _mockContext = new Mock<PHT_DbEntities>();

            // Set up the Users DbSet in the mocked context
            _mockContext.Setup(c => c.Users).Returns(_mockUserSet.Object);

            // Initialize the repository with the mocked context
            _userRepo = new EFUserRepo(_mockContext.Object);
        }

        [TestMethod]
        public void CreateUser_Should_Add_User_To_Context()
        {
            // Arrange
            var user = new User { UserID = 1, Email = "test@test.com", PasswordHash = "passwordHash" };

            // Act
            _userRepo.Create(user);

            // Assert
            _mockUserSet.Verify(m => m.Add(It.IsAny<User>()), Times.Once());
            _mockContext.Verify(m => m.SaveChanges(), Times.Once());
        }

        [TestMethod]
        public void UpdateUser_Should_Update_Existing_User()
        {
            // Arrange
            var user = new User { UserID = 1, Email = "test@test.com", PasswordHash = "passwordHash" };
            _mockUserSet.Setup(m => m.Find(It.IsAny<int>())).Returns(user);

            var updatedUser = new User { UserID = 1, Email = "updated@test.com", PasswordHash = "newHash" };

            // Act
            _userRepo.Update(updatedUser);

            // Assert
            _mockContext.Verify(m => m.SaveChanges(), Times.Once());
        }

        [TestMethod]
        public void DeleteUser_Should_Remove_Existing_User()
        {
            // Arrange
            var user = new User { UserID = 1, Email = "test@test.com", PasswordHash = "passwordHash" };
            _mockUserSet.Setup(m => m.Find(It.IsAny<int>())).Returns(user);

            // Act
            _userRepo.Delete(user);

            // Assert
            _mockUserSet.Verify(m => m.Remove(It.IsAny<User>()), Times.Once());
            _mockContext.Verify(m => m.SaveChanges(), Times.Once());
        }

        [TestMethod]
        public void ReadAll_Should_Return_All_Users()
        {
            // Arrange
            var data = new List<User>
            {
                new User { UserID = 1, Email = "test1@test.com", PasswordHash = "hash1" },
                new User { UserID = 2, Email = "test2@test.com", PasswordHash = "hash2" }
            }.AsQueryable();

            _mockUserSet.As<IQueryable<User>>().Setup(m => m.Provider).Returns(data.Provider);
            _mockUserSet.As<IQueryable<User>>().Setup(m => m.Expression).Returns(data.Expression);
            _mockUserSet.As<IQueryable<User>>().Setup(m => m.ElementType).Returns(data.ElementType);
            _mockUserSet.As<IQueryable<User>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());

            // Act
            ObservableCollection<User> result = _userRepo.ReadAll();

            // Assert
            Assert.AreEqual(2, result.Count);
            Assert.AreEqual("test1@test.com", result[0].Email);
            Assert.AreEqual("test2@test.com", result[1].Email);
        }

        [TestMethod]
        public void IsValidUser_Should_Return_True_For_Valid_User()
        {
            // Arrange
            var user = new User { Email = "test@test.com", PasswordHash = "passwordHash" };
            _mockUserSet.Setup(m => m.FirstOrDefault(It.IsAny<System.Linq.Expressions.Expression<System.Func<User, bool>>>())).Returns(user);

            // Act
            bool isValid = _userRepo.IsValidUser(user);

            // Assert
            Assert.IsTrue(isValid);
        }

        [TestMethod]
        public void IsValidUser_Should_Return_False_For_Invalid_User()
        {
            // Arrange
            User user = null;
            _mockUserSet.Setup(m => m.FirstOrDefault(It.IsAny<System.Linq.Expressions.Expression<System.Func<User, bool>>>())).Returns(user);

            var invalidUser = new User { Email = "invalid@test.com", PasswordHash = "invalidHash" };

            // Act
            bool isValid = _userRepo.IsValidUser(invalidUser);

            // Assert
            Assert.IsFalse(isValid);
        }

        [TestMethod]
        public void GetPassword_Should_Return_Hashed_String()
        {
            // Arrange
            var password = "mySecretPassword";

            // Act
            var hashedPassword = _userRepo.GetPassword(password);

            // Assert
            Assert.IsNotNull(hashedPassword);
            Assert.AreNotEqual(password, hashedPassword);
        }
    }
}
