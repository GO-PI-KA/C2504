server
-------------
MainWindow.xaml
-----------------
<Window x:Class="Task.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Task"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Closed="Window_Closed" Style="{StaticResource winPrimary}">
    <Window.Resources>
        <local:ButtonVisibilityConverter x:Key="ButtonVisibilityConverter"/>
    </Window.Resources>
    <!--scrollbar-->
    <ScrollViewer  VerticalScrollBarVisibility="Auto" >
        <DockPanel>
            <!--grid to make responsive-->
            <Grid Margin="25,20,20,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MaxWidth="1550"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="10" MaxWidth="1550">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <!--Search Textbox-->
                    <TextBox Style="{StaticResource txtPrimary}"
         x:Name="textSearchBox" Margin="0,5,0,0" TextChanged="textSearchBox_TextChanged"/>
                    <!--Search TextBox Label-->
                    <Label Style="{StaticResource lblPrimary}"
         x:Name="labelSearchBox" HorizontalAlignment="Left" Margin="320,5,0,0"  />
                    <!--Search TextBox Icon-->
                    <Image Style="{StaticResource imgPrimary}"
        RenderTransformOrigin="0.333,1.465" OpacityMask="#FFF4F4F4"/>

                    <!--Search Button-->
                </Grid>
                <!--Disease Buttons-->
                <Grid  Grid.Row="1" Width="Auto" MaxWidth="1550" >
                    <WrapPanel x:Name="btnDisease"  Style="{StaticResource wrpPrimary}" Margin="10,5,10,5" >
                        <Button Style="{StaticResource btnControl}" Content="Atherosclerosis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Atherosclerosis}" />
                        <Button Style="{StaticResource btnControl}" Content="Arteriovenous" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Arteriovenous}" />
                        <Button Style="{StaticResource btnControl}" Content="Aneurysms" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Aneurysms}"  />
                        <Button Style="{StaticResource btnControl}" Content="Buerger" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Buerger}" />
                        <Button Style="{StaticResource btnControl}" Content="Bleeding" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Bleeding}" />
                        <Button Style="{StaticResource btnControl}" Content="Dissection" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Dissection}" />
                        <Button Style="{StaticResource btnControl}" Content="Dysplastic" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Dysplastic}" />
                        <Button Style="{StaticResource btnControl}" Content="Gout" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Gout}" />
                        <Button Style="{StaticResource btnControl}" Content="Panniculitis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Panniculitis}" />
                        <Button Style="{StaticResource btnControl}" Content="Phlebitis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Phlebitis}" />
                        <Button Style="{StaticResource btnControl}" Content="Varicose" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Varicose}" />
                        <Button Style="{StaticResource btnControl}" Content="Vasculitis" Visibility="{Binding Text,ElementName=textSearchBox,Converter={StaticResource ButtonVisibilityConverter},ConverterParameter=Vasculitis}" />
                    </WrapPanel>
                </Grid>
            </Grid>
        </DockPanel>
    </ScrollViewer>
</Window>
----------------------------------------------------------------
MainWindow.xaml.cs
---------------------
using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Task
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// To terminate the application when the window is closed.
        /// </summary>
        private TcpServer tcpServer;
        public MainWindow()
        {
            InitializeComponent();
            tcpServer = new TcpServer();
            tcpServer.OnReceivedMessage += TcpServer_OnReceivedMessage;
            tcpServer.Start();
        }
        /// <summary>
        /// Event Handler that gets triggered when server receives a message from the client.
        /// </summary>
        /// <param name="message"></param>
        private void TcpServer_OnReceivedMessage(string message)
        {
         Dispatcher.Invoke(() =>
        {
            if (message == "SHOW_ALL")
            {
                
                
            
            
            
                textSearchBox.Text = message;
            
        });
        }
       
        public void Window_Closed(object sender, EventArgs e)
        {   
            tcpServer.Stop();
            Application.Current.Shutdown();
        }
        /// <summary>
        /// To check the visibility of the label in search textbox.
        /// </summary>
        private void textSearchBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (textSearchBox.Text != null)
                {
                    labelSearchBox.Visibility = string.IsNullOrWhiteSpace(textSearchBox.Text) ? Visibility.Visible : Visibility.Collapsed;
                }
               
                Logger.log.Info("No issues!");

            }
            catch (Exception)
            {
                Logger.log.Error("Error!");
            }
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
ButtonVisibilityConverter.cs
-------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows;
using System.Windows.Input;
using log4net;
using System.Diagnostics;
using System.Windows.Data;
using System.Globalization;

namespace Task
{ 
    /// <summary>
    /// A class to search buttons.
    /// </summary>
    public class ButtonVisibilityConverter : IValueConverter
    {
        /// <summary>
        /// Checks the visibility of buttons according to the text in search textbox.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="targetType"></param>
        /// <param name="parameter"></param>
        /// <param name="culture"></param>
        /// <returns>the buttons that matches the criteria.</returns>
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {

            if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
            {
                return Visibility.Visible;
            }

            string searchText = value.ToString().ToLower();
            string buttonContent = parameter.ToString().ToLower();
            return buttonContent.StartsWith(searchText) ? Visibility.Visible : Visibility.Collapsed;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
 }
---------------------------------------------------------------------------------------------------------------------
TcpServer.cs
------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace Task
{
    /// <summary>
    /// this class act as Server
    /// </summary>
    public class TcpServer
    {
        private TcpListener tcpListener;
        private Thread listenerThread;
        private bool isRunning;
        public event Action<string> OnReceivedMessage;

        /// <summary>
        /// Tcp server listens for incoming client connection on port 5000.
        /// </summary>
        public void Start()
        {
            try
            {
                tcpListener = new TcpListener(IPAddress.Any, 5000);
                tcpListener.Start();
                isRunning = true;
                listenerThread = new Thread(ListenForClients);
                listenerThread.Start();
            }
            catch (Exception ex)
            {
                Logger.log.Error("Error in starting the TCP server", ex);
            }
        }
        /// <summary>
        /// Listens for incoming TCP client connection.
        /// </summary>
        private void ListenForClients()
        {
            while (isRunning)
            {
                try
                {
                    TcpClient tcpClient = tcpListener.AcceptTcpClient();
                    Thread clientThread = new Thread(HandleClientComm);
                    clientThread.Start(tcpClient);
                   
                }
                catch (Exception ex)
                {
                    Logger.log.Error("Error in connecting the client", ex);
                }
            }
        }
        /// <summary>
        /// Handle the communication between server and the connected client.
        /// </summary>
        /// <param name="obj"></param>
        private void HandleClientComm(object obj)
        {
            TcpClient tcpClient = obj as TcpClient;
            NetworkStream stream = tcpClient.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
            {
                string message=Encoding.UTF8.GetString(buffer,0,bytesRead);
                Logger.log.Info($"Received message:{message}");
                OnReceivedMessage?.Invoke(message);
                
              
                
            }
        }
        
        /// <summary>
        /// Stop the server.
        /// </summary>
        public void Stop()
        {
            isRunning = false;
            tcpListener.Stop();
            listenerThread?.Join();
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Client
-----------
MainWindow.xaml
---------------
<Window x:Class="TaskClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TaskClient"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Style="{StaticResource winPrimary}">
    <Canvas>
        <Canvas Style="{StaticResource canvPrimary}" Height="268" Canvas.Left="84" Canvas.Top="83" Width="632">
            <TextBox x:Name="SearchTextBox"  TextWrapping="Wrap" Width="400" Height="41" HorizontalAlignment="Center" VerticalAlignment="Top" Canvas.Left="106" Canvas.Top="107" FontSize="20" TextChanged="SearchTextBox_TextChanged_1"/>
            <Label x:Name="SendLabel" Canvas.Left="214" Canvas.Top="111" Opacity="0.5" FontSize="20" Content="Enter Your Text Here." >
            </Label>
        </Canvas>
    </Canvas>
</Window>
-------------------------------------------------------------------------
MainWindow.xaml.cs
-------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.UI.WebControls;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace TaskClient
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {   
        private TcpClientHandler tcpClientHandler;
        public MainWindow()
        {
            InitializeComponent();
            tcpClientHandler = new TcpClientHandler();
        }
        /// <summary>
        /// To check the visibility of the label placed in the search textbox.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SearchTextBox_TextChanged_1(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (SearchTextBox.Text != null)
                {
                    SendLabel.Visibility = string.IsNullOrWhiteSpace(SearchTextBox.Text) ? Visibility.Visible : Visibility.Collapsed;
                }
                Logger.log.Info("No issues!");
                string message = SearchTextBox.Text;
                if (string.IsNullOrWhiteSpace(message))
                {
                    message = "SHOW_ALL";



                }
                tcpClientHandler.SendMessage(message);

            }
            catch (Exception)
            {
                Logger.log.Error("Error!");
            }
        }
    }
}
---------------------------------------------------------------------------------------
TcpClientHandler.cs
----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Sockets;
using System.IO;

namespace TaskClient
{
    /// <summary>
    /// A class to send messages by the client to the TCP server
    /// </summary>
    public class TcpClientHandler
    {
        private string serverAddress = "127.0.0.1";
        private int port = 5000;
        /// <summary>
        /// Sends Message from client to the server.
        /// </summary>
        /// <param name="message"></param>
        public void SendMessage(string message)
        {
            try
            {

                using (TcpClient tcpClient = new TcpClient(serverAddress, port))
                {
                    NetworkStream stream = tcpClient.GetStream();
                    byte[] buffer = Encoding.UTF8.GetBytes(message);
                    stream.Write(buffer,0,buffer.Length);
                    stream.Flush();

                }
            }
            catch (Exception ex) 
            {
                Logger.log.Error("Error in sending message to server", ex);
            }
        }
    }
}
--------------------------------------------------


