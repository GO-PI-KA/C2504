To implement a simple TCP/IP server-client communication in the existing WPF application, we will create a new class to handle the server-side logic and modify the client-side logic to communicate with the server.

Here’s a step-by-step guide to implement the functionality where the WPF application becomes the server and the client sends a message (button name to be searched) to the server, which updates the TextBox in the server window.

Step 1: Create a TCP Server Class in the Server WPF Application
This class will handle the TCP server that listens for incoming connections from clients.

Create TcpServer.cs in the Server project.
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace Task
{
    public class TcpServer
    {
        private TcpListener tcpListener;
        private Thread listenerThread;
        private bool isRunning;

        public event Action<string> OnReceivedMessage;

        public void Start()
        {
            try
            {
                tcpListener = new TcpListener(IPAddress.Any, 5000); // Listening on port 5000
                tcpListener.Start();
                isRunning = true;
                listenerThread = new Thread(ListenForClients);
                listenerThread.Start();
            }
            catch (Exception ex)
            {
                Logger.log.Error("Error starting TCP server", ex);
            }
        }

        private void ListenForClients()
        {
            while (isRunning)
            {
                try
                {
                    // Blocks until a client has connected to the server
                    TcpClient tcpClient = tcpListener.AcceptTcpClient();
                    Thread clientThread = new Thread(HandleClientComm);
                    clientThread.Start(tcpClient);
                }
                catch (Exception ex)
                {
                    Logger.log.Error("Error accepting client connection", ex);
                }
            }
        }

        private void HandleClientComm(object obj)
        {
            TcpClient tcpClient = obj as TcpClient;
            NetworkStream stream = tcpClient.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead;

            while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
            {
                string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                Logger.log.Info($"Received message: {message}");

                // Raise event with the message received from the client
                OnReceivedMessage?.Invoke(message);
            }
        }

        public void Stop()
        {
            isRunning = false;
            tcpListener.Stop();
            listenerThread?.Join();
        }
    }
}
Step 2: Integrate TCP Server in the Main Window (Server Side)
In the MainWindow.xaml.cs of the server application, we'll initialize and start the TCP server and handle incoming messages.

Modify MainWindow.xaml.cs (Server)
using System;
using System.Windows;

namespace Task
{
    public partial class MainWindow : Window
    {
        private TcpServer tcpServer;

        public MainWindow()
        {
            InitializeComponent();
            tcpServer = new TcpServer();
            tcpServer.OnReceivedMessage += TcpServer_OnReceivedMessage;
            tcpServer.Start();
        }

        // This event handler will update the search box text when the message is received
        private void TcpServer_OnReceivedMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                txtSearchBox.Text = message; // Update the search textbox with the received message
            });
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            tcpServer.Stop(); // Stop the server when the window is closed
            Application.Current.Shutdown();
        }

        private void txtSearchBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            if (txtSearchBox.Text != null)
            {
                lblSearchBox.Visibility = string.IsNullOrWhiteSpace(txtSearchBox.Text) ? Visibility.Visible : Visibility.Collapsed;
            }
        }
    }
}
Step 3: Create the Client-Side TCP Communication
On the client side, we’ll create the TCP client that will send the message to the server when the user presses the Send button.

Create TcpClient.cs in the Client project.
using System;
using System.Net.Sockets;
using System.Text;

namespace Task
{
    public class TcpClientHandler
    {
        private string serverAddress = "127.0.0.1"; // Localhost for testing
        private int port = 5000;

        public void SendMessage(string message)
        {
            try
            {
                using (TcpClient tcpClient = new TcpClient(serverAddress, port))
                {
                    NetworkStream stream = tcpClient.GetStream();
                    byte[] buffer = Encoding.UTF8.GetBytes(message);
                    stream.Write(buffer, 0, buffer.Length);
                    stream.Flush();
                }
            }
            catch (Exception ex)
            {
                Logger.log.Error("Error sending message to server", ex);
            }
        }
    }
}
Step 4: Modify the Client WPF Application (UI & Logic)
In the client-side MainWindow.xaml, we will add a TextBox and a Send button to send the search term to the server.

Modify MainWindow.xaml (Client)

<Window x:Class="Task.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Client Window" Height="200" Width="300">
    <Grid>
        <TextBox x:Name="txtSearchText" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,10,10,0"/>
        <Button Content="Send" HorizontalAlignment="Right" VerticalAlignment="Center" Width="75" Height="30" Margin="0,50,10,10" Click="SendButton_Click"/>
    </Grid>
</Window>
Modify MainWindow.xaml.cs (Client)
using System;
using System.Windows;

namespace Task
{
    public partial class MainWindow : Window
    {
        private TcpClientHandler tcpClientHandler;

        public MainWindow()
        {
            InitializeComponent();
            tcpClientHandler = new TcpClientHandler();
        }

        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string message = txtSearchText.Text;
            if (!string.IsNullOrWhiteSpace(message))
            {
                tcpClientHandler.SendMessage(message); // Send the message to the server
            }
        }
    }
}
Step 5: Test the Server and Client
Run the Server Application:

The server application will start and wait for incoming connections on port 5000.
The TcpServer will listen for messages and update the txtSearchBox in the server window whenever a message is received.
Run the Client Application:

The client application will allow the user to type a search term and click "Send" to send the message to the server.
The server's txtSearchBox should automatically be updated with the search term sent from the client.

Conclusion:
You have successfully integrated TCP/IP communication into the WPF server-client applications. The server listens for messages from the client, and the client can send a search term to the server, which will update the search box on the server window.



